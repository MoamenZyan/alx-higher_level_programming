# tests/7-base_geometry.txt

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Correct Class Type test:
    >>> bg = BaseGeometry()
    >>> type(bg) == BaseGeometry
    True

area method is an instance method:
    >>> type(BaseGeometry.__dict__['area'])
    <class 'function'>

area method called via class with no args:
    >>> bg.__class__.area()
    Traceback (most recent call last):
    TypeError: area() missing 1 required positional argument: 'self'

area method args test (1 arg):
    >>> bg.area(10)
    Traceback (most recent call last):
    TypeError: area() takes 1 positional argument but 2 were given

area method normal test:
    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented


integer_validator() instance method
-----------------------------------
integer_validator is an instance method:
    >>> type(BaseGeometry.__dict__['integer_validator'])
    <class 'function'>

integer_validator method called via class with no args:
    >>> bg.__class__.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 3 required positional arguments: 'self', 'name', and 'value'


integer_validator method arg test (3 args):
    >>> bg.integer_validator(1, 1, 1)
    Traceback (most recent call last):
    TypeError: integer_validator() takes 3 positional arguments but 4 were given


integer_validator method arg test (0 args):
    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
